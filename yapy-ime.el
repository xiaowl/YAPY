(load-file "yapy-state.el")
(load-file "gen_dict.el")
(load-file "yapy-utils.el")
(load-file "yapy-pinyin.el")
(load-file "yapy-core.el")
(setq YY-KeyCodes nil)
(setq YY-Current-Match nil)
(setq YY-MatchState nil)

(defvar map
  (let ((m (make-sparse-keymap)))
    (define-key m "=" 'yy-delete-char)
    (define-key m [backspace] 'yy-delete-char)
    (define-key m [delete] 'yy-delete-char)
    m) "Keymap")

(defun yy-delete-char ()
  (interactive)
  (YAPY-IME ?\b)
  (if (null YY-KeyCodes)
      (setq overriding-terminal-local-map nil)))

(defun YAPY-IME (key)
  (cond ((= ?\s key)
         (setq YY-KeyCodes nil))
        ((= ?\b key)
         (setq YY-KeyCodes (butlast YY-KeyCodes)))
        ((or (and (>= key ?a)
                  (<= key ?z))
             (= ?' key))
         (add-to-list 'YY-KeyCodes key t #'(lambda (a b) nil))))
  (if YY-KeyCodes
      (setq overriding-terminal-local-map map))
  (let* ((pinyin (YAPY-pinyin-keyseq2 YY-KeyCodes YAPY-pinyin-state))
         (len (length pinyin)))
    (if (and (> len 1)
             (< len 10))
        (let* ((match (YAPY-pinyin pinyin 5))
               (words (car match))
               (state (car (cdr match))))
          (if words
              (setq YY-Current-Match (list (car words) YY-KeyCodes))
            (progn
              (insert-string (or (car YY-Current-Match) ""))
              (setq YY-Current-Match nil)
              (setq YY-KeyCodes (list key))))
          (yy-minibuf-show (concat (string-join pinyin " ") " " (string-join words " "))))
      (yy-minibuf-show (concat (string-join pinyin " ") "...")))))

(defun YAPY-Exit ()
  (setq YY-KeyCodes nil)
  (setq overriding-terminal-local-map nil)
  (message "Bye"))

(defun YAPY-Active (name &optional active-func)
  (setq input-method-function 'YAPY-IME)
  (setq deactivate-current-input-method-function 'YAPY-Exit)
  (message nil))

(defun yy-minibuf-show (msg)
  (minibuffer-window)
  (message msg)
  (sit-for 100)
  )

(register-input-method "IME2" "euc-cn" 'YAPY-Active "YAPY")
